"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var User_1 = __importDefault(require("./User"));
var util_1 = require("../utils/util");
var qiniuUploader = require('../utils/qiniuUploader');
function initQiniu() {
    var options = {
        region: 'NCN',
        uptoken: '',
        uptokenURL: 'https://jellyfishmix.com/wx-interchange/file/get_upload_token',
        uptokenFunc: function () { },
        domain: 'https://wx-interchange.oss.jellyfishmix.com',
        shouldUseQiniuFileName: true
    };
    qiniuUploader.init(options);
}
var Upload = (function () {
    function Upload() {
    }
    Upload.uploadLocalImg = function (imgObject) {
        return new Promise(function (resolve, reject) {
            initQiniu();
            console.log(imgObject);
            var userInfo = User_1.default.getUserInfoStorage();
            var filePath = imgObject.tempFilePaths[0];
            var chunks = filePath.split('.');
            var time = util_1.getTime(userInfo.nickName);
            var fileName = userInfo.nickName + "_" + time + "." + chunks[chunks.length - 1];
            qiniuUploader.upload(filePath, function (res) {
                resolve(res);
            }, function (error) {
                reject(error);
            }, null, function (progress) {
            }, function (cancelTask) {
                console.log('中断上传', cancelTask);
            });
        });
    };
    Upload.uploadMessageFile = function (fileObject) {
        return new Promise(function (resolve, reject) {
            initQiniu();
            var filePath = fileObject.path;
            var fileName = fileObject.name;
            qiniuUploader.upload(filePath, function (res) {
                resolve(res);
            }, function (error) {
                console.error('error: ' + JSON.stringify(error));
                reject(error);
            }, null, function (progress) {
                console.log('上传进程为', progress);
            }, function (cancelTask) {
                console.log('中断上传', cancelTask);
            });
        });
    };
    return Upload;
}());
exports.default = Upload;
//# sourceMappingURL=data:application/json;base64,