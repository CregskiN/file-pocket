"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var User_1 = __importDefault(require("./User"));
var https_1 = __importDefault(require("../utils/https"));
var Team = (function () {
    function Team() {
    }
    Team.getOfficialTeamList = function () {
        return new Promise(function (resolve, reject) {
            var options = {
                url: '/team/query_official_team_list',
                method: 'GET',
            };
            https_1.default.request(options).then(function (res) {
                console.log('成功获取官方项目组列表', res);
                resolve(res);
            }).catch(function (err) {
                console.log('获取官方项目组列表失败', err);
                reject(err);
            });
        });
    };
    Team.getJoinedTeamList = function (uid) {
        return new Promise(function (resolve, reject) {
            var options = {
                url: '/user/query_joined_team_list_by_uid',
                method: "GET",
                data: {
                    uid: uid
                }
            };
            https_1.default.request(options).then(function (res) {
                console.log('成功获取我加入列表', res);
            }).catch(function (err) {
                console.log('获取我加入的项目组列表失败', err);
                reject(err);
            });
        });
    };
    Team.getCreatedTeamList = function (uid) {
        return new Promise(function (resolve, reject) {
            var options = {
                url: '/user/query_created_team_list_by_uid',
                method: 'GET',
                data: {
                    uid: uid
                }
            };
            https_1.default.request(options).then(function (res) {
                console.log('成功获取我创建的列表', res);
            }).catch(function (err) {
                console.log('获取我创建的列表失败', err);
                reject(err);
            });
        });
    };
    Team.getManagedTeamList = function (uid) {
        return new Promise(function (resolve, reject) {
            var options = {
                url: '/user/query_managed_team_list_by_uid',
                method: 'GET',
                data: {
                    uid: uid
                }
            };
            https_1.default.request(options).then(function (res) {
                console.log('成功获取我管理的项目列表', res);
                resolve(res);
            }).catch(function (err) {
                console.log('获取我管理的列表失败', err);
                reject(err);
            });
        });
    };
    Team.getTeamInfoByTid = function (tid) {
        return new Promise(function (resolve, reject) {
            var uid = User_1.default.getUserInfoStorage().uid;
            var options = {
                url: '/team/query_team_info_by_tid',
                method: 'GET',
                data: {
                    uid: uid,
                    tid: tid
                }
            };
            https_1.default.request(options).then(function (res) {
                console.log('成功查询到项目组信息', res);
                resolve(res.data);
            }).catch(function (err) {
                console.log('查询项目组信息失败', err);
                reject(err);
            });
        });
    };
    Team.getTeamUserListByTid = function (tid) {
        return new Promise(function (resolve, reject) {
            var options = {
                url: '/team/query_team_user_list_by_tid',
                method: 'GET',
                data: {
                    tid: tid
                }
            };
            https_1.default.request(options).then(function (res) {
                console.log('成功查询成员列表', res);
                resolve(res);
            }).catch(function (err) {
                console.log('查询成员列表失败', err);
                reject(err);
            });
        });
    };
    Team.queryTeamFileList = function (tid, pageIndex) {
        return new Promise(function (resolve, reject) {
            var options = {
                url: '/team/query_team_file_list_order_by_creation_time',
                method: 'GET',
                data: {
                    tid: tid,
                    pageIndex: pageIndex,
                    pageSize: 10,
                }
            };
            https_1.default.request(options).then(function (res) {
                resolve(res.data);
            }).catch(function (err) {
                reject(err);
            });
        });
    };
    return Team;
}());
exports.default = Team;
//# sourceMappingURL=data:application/json;base64,