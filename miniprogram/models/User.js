"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var https_1 = __importDefault(require("../utils/https"));
var User = (function () {
    function User() {
    }
    User.login = function () {
        return new Promise(function (resolve, reject) {
            wx.checkSession({
                success: function (res) {
                },
                fail: function (err) {
                },
                complete: function () {
                    wx.login({
                        success: function (res) {
                            console.log('wx.login res', res);
                            var data = { code: res.code };
                            var options = {
                                url: '/wxma_auth/code_to_session',
                                method: 'POST',
                                data: data
                            };
                            var loginRes = https_1.default.request(options);
                            loginRes.then(function (res) {
                                console.log(res);
                                var openid_sessionKey = res.data;
                                console.log('login接口获取的openid_sessionKey', openid_sessionKey);
                                User.setOpenidSessionKeyStorage(openid_sessionKey);
                                resolve(openid_sessionKey);
                            }).catch(function (err) {
                                console.log('login逻辑有误 - ', err);
                                reject(err);
                            });
                        },
                        fail: function (err) {
                            console.log('wx.login接口调用失败', err);
                            reject(err);
                        }
                    });
                }
            });
        });
    };
    User.getAuthorize = function () {
        return new Promise(function (resolve, reject) {
            wx.getSetting({
                success: function (res) {
                    console.log(res);
                    if (res.authSetting['scope.userInfo']) {
                        var userInfo = null;
                        var userInfoStorage = User.getUserInfoStorage();
                        if (userInfoStorage) {
                            userInfo = userInfoStorage;
                            resolve(userInfo);
                            return;
                        }
                        else {
                            wx.getUserInfo({
                                success: function (res) {
                                    resolve(res.userInfo);
                                    return;
                                },
                                fail: function (err) {
                                    reject(err);
                                    return;
                                }
                            });
                        }
                    }
                    else if (!res.authSetting['scope.userInfo']) {
                        resolve({});
                        return;
                    }
                },
                fail: function (err) {
                    reject(err);
                    return;
                }
            });
        });
    };
    User.setUserInfoStorage = function (userInfo) {
        var oUserInfo = this.getUserInfoStorage();
        var nUserInfo = __assign(__assign({}, oUserInfo), userInfo);
        delete nUserInfo['username'];
        wx.setStorageSync('USERINFO', nUserInfo);
    };
    User.getOpenidSessionKeyStorage = function () {
        return wx.getStorageSync('OPENID_SESSIONKEY');
    };
    User.setOpenidSessionKeyStorage = function (openid_sessionKey) {
        var oOpenid_sessionKey = this.getOpenidSessionKeyStorage();
        var nOpenid_sessionKey = __assign(__assign({}, oOpenid_sessionKey), openid_sessionKey);
        wx.setStorageSync('OPENID_SESSIONKEY', nOpenid_sessionKey);
    };
    User.getUserInfoStorage = function () {
        try {
            return wx.getStorageSync('USERINFO');
        }
        catch (err) {
            console.log('USERINFO提取失败', err);
            return {};
        }
    };
    User.getUserInfo = function () {
        try {
            var userInfo = wx.getStorageSync('userInfo');
            if (userInfo !== '') {
                userInfo = JSON.parse(userInfo);
            }
            else {
                userInfo = {};
            }
            return userInfo.userInfo;
        }
        catch (err) {
            console.log(err);
            return {};
        }
    };
    User.setUserInfo = function (userInfo) {
        try {
            var oldInfo = this.getUserInfo() || {};
            var newUserInfo = __assign(__assign({}, oldInfo), { userInfo: userInfo });
            wx.setStorageSync('userInfo', JSON.stringify(newUserInfo));
        }
        catch (err) {
            console.log(err);
        }
    };
    return User;
}());
exports.default = User;
//# sourceMappingURL=data:application/json;base64,